/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/filtr/filtr-generale.js":
/*!****************************************!*\
  !*** ./src/js/filtr/filtr-generale.js ***!
  \****************************************/
/***/ (() => {

var filtrOptionsVision = function filtrOptionsVision() {
  var filtrTitle = document.querySelectorAll('.js-filtr-title');
  var filtrItemOptions = document.querySelectorAll('.filtr-item__options');
  if (!filtrTitle.length) return;
  filtrTitle.forEach(function (item) {
    item.addEventListener('click', function (e) {
      item.nextElementSibling.classList.toggle('active');
      if (item.children[1]) item.children[1].classList.toggle('active');
    });
  });

  // document.addEventListener( 'click', (e) => {
  //     filtrTitle.forEach((item) => {
  //         const itemNo = e.composedPath().includes(item);
  //         if (!itemNo) {
  //             item.nextElementSibling.classList.remove('active');
  //             if (item.children[1])  item.children[1].classList.remove('active');
  //         }
  //     });
  // });

  document.addEventListener('keydown', function (e) {
    if (e.keyCode == 27) {
      filtrTitle.forEach(function (item) {
        item.nextElementSibling.classList.remove('active');
        if (item.children[1]) item.children[1].classList.remove('active');
      });
    }
  });

  // filtrItemOptions.forEach((item) => {
  //     let filtrOptions = item.querySelectorAll('.filtr-option');
  //     filtrOptions.forEach((elem) => {
  //         elem.addEventListener('click', (e) => {
  //             // console.dir(elem.dataset.value);
  //             elem.parentElement.previousElementSibling.children[0].innerText = e.target.innerText;
  //             optionsChecked(filtrOptions);
  //             elem.children[1].classList.add('active');
  //             Cookies.set('glcSort', elem.dataset.value);
  //         });
  //     });
  // });
};
filtrOptionsVision();

// function optionsChecked(options) {
//     options.forEach((elem) => {
//         elem.children[1].classList.remove('active');
//     });
// }

function optionsName(name) {
  var options = {
    'Рекомендованные': 'recommended',
    'Сначала дешевые': 'min_price',
    'Сначала дорогие': 'max_price'
  };
  return options[name];
}

/***/ }),

/***/ "./src/js/filtr/filtr-render.js":
/*!**************************************!*\
  !*** ./src/js/filtr/filtr-render.js ***!
  \**************************************/
/***/ (() => {

function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
localStorage.removeItem('glcRegion');
localStorage.removeItem('glcType');
localStorage.removeItem('glcAllocation');
localStorage.removeItem('glcWorking');
localStorage.removeItem('glcNature');
localStorage.removeItem('glcFacilGen');
localStorage.removeItem('glcFacilChildren');
localStorage.removeItem('glcEntertainment');
localStorage.removeItem('glcTerritory');
localStorage.removeItem('glcSafety');
localStorage.removeItem('glcPrice');
localStorage.removeItem('glcPriceSt');
localStorage.removeItem('glcPriceMin');
localStorage.removeItem('glcPriceMax');
var locationsArchive = function locationsArchive(glempAll) {
  var regionItem = document.querySelector('.filtr-item.region');
  if (!regionItem) return;
  regionItem.style.display = '';
  var locObj = [];
  glempAll.forEach(function (item) {
    var locItem = {
      location: item.location,
      location_id: item.location_id,
      location_slug: item.location_slug
    };
    locObj.push(locItem);
  });
  locObj = removeDuplicates(locObj);
  locObj.sort(function (a, b) {
    return a.location.localeCompare(b.location);
  });
  if (locObj.length) {
    countFiltrItem('glcRegion', regionItem);
    ls = localStorage.getItem('glcRegion');
    var chek = '';
    regionItem.children[1].innerHTML = '';
    locObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item.location)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.location_id == item.location_id;
      });
      regionItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item.location_id, "\" name=\"").concat(item.location, "\" data-name=\"glcRegion\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item.location_id, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item.location, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                </li>"));
    });
  } else {
    regionItem.children[1].innerHTML = '';
    regionItem.style.display = 'none';
  }
};
locationsArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrTypeArchive = function filtrTypeArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.type');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.type);
    });
    typObj = makeUniqSort(typObj);
  } else {
    typObj = glempAll[0].type;
  }
  if (typObj.length) {
    typeItem.children[1].innerHTML = '';
    countFiltrItem('glcType', typeItem);
    ls = localStorage.getItem('glcType');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.type.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcType\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrTypeArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrAllocationArchive = function filtrAllocationArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.allocation');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.allocation);
    });
    typObj = typObj.reduce(function (acc, i) {
      return i ? [].concat(_toConsumableArray(acc), [i]) : acc;
    }, []);
    typObj = makeUniqSort(typObj);
  } else {
    typObj = glempAll[0].allocation;
  }
  typeItem.children[1].innerHTML = '';
  if (typObj.length) {
    // typeItem.children[1].innerHTML = '';
    countFiltrItem('glcAllocation', typeItem);
    ls = localStorage.getItem('glcAllocation');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.allocation.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcAllocation\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrAllocationArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrWorkingArchive = function filtrWorkingArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.working');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.working_mode_seasons);
    });
    typObj = typObj.reduce(function (acc, i) {
      return i ? [].concat(_toConsumableArray(acc), [i]) : acc;
    }, []);
    typObj = montsSort(typObj);
  } else {
    typObj = glempAll[0].working_mode_seasons;
  }
  typeItem.children[1].innerHTML = '';
  if (typObj.length) {
    // typeItem.children[1].innerHTML = '';
    countFiltrItem('glcWorking', typeItem);
    ls = localStorage.getItem('glcWorking');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.working_mode_seasons.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcWorking\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrWorkingArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrNatureArchive = function filtrNatureArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.nature');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.nature_around);
    });
    typObj = typObj.reduce(function (acc, i) {
      return i ? [].concat(_toConsumableArray(acc), [i]) : acc;
    }, []);
    typObj = makeUniqSort(typObj);
  } else {
    typObj = glempAll[0].nature_around;
  }
  typeItem.children[1].innerHTML = '';
  if (typObj.length) {
    // typeItem.children[1].innerHTML = '';
    countFiltrItem('glcNature', typeItem);
    ls = localStorage.getItem('glcNature');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.nature_around.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcNature\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrNatureArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrFacilitiesGeneralArchive = function filtrFacilitiesGeneralArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.facilities_general');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.facilities_general);
    });
    typObj = typObj.reduce(function (acc, i) {
      return i ? [].concat(_toConsumableArray(acc), [i]) : acc;
    }, []);
    typObj = makeUniqSort(typObj);
  } else {
    typObj = glempAll[0].facilities_general;
  }
  typeItem.children[1].innerHTML = '';
  if (typObj.length) {
    // typeItem.children[1].innerHTML = '';
    countFiltrItem('glcFacilGen', typeItem);
    ls = localStorage.getItem('glcFacilGen');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.facilities_general.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcFacilGen\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrFacilitiesGeneralArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrChildrenArchive = function filtrChildrenArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.children');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.facilities_children);
    });
    typObj = typObj.reduce(function (acc, i) {
      return i ? [].concat(_toConsumableArray(acc), [i]) : acc;
    }, []);
    typObj = makeUniqSort(typObj);
  } else {
    typObj = glempAll[0].facilities_children;
  }
  typeItem.children[1].innerHTML = '';
  if (typObj.length) {
    // typeItem.children[1].innerHTML = '';
    countFiltrItem('glcFacilChildren', typeItem);
    ls = localStorage.getItem('glcFacilChildren');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.facilities_children.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcFacilChildren\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrChildrenArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrErtainmentArchive = function filtrErtainmentArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.entertainment');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.entertainment);
    });
    typObj = typObj.reduce(function (acc, i) {
      return i ? [].concat(_toConsumableArray(acc), [i]) : acc;
    }, []);
    typObj = makeUniqSort(typObj);
  } else {
    typObj = glempAll[0].entertainment;
  }
  typeItem.children[1].innerHTML = '';
  if (typObj.length) {
    // typeItem.children[1].innerHTML = '';
    countFiltrItem('glcEntertainment', typeItem);
    ls = localStorage.getItem('glcEntertainment');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.entertainment.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcEntertainment\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrErtainmentArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrTerritoryArchive = function filtrTerritoryArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.territory');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.territory);
    });
    typObj = typObj.reduce(function (acc, i) {
      return i ? [].concat(_toConsumableArray(acc), [i]) : acc;
    }, []);
    typObj = makeUniqSort(typObj);
  } else {
    typObj = glempAll[0].territory;
  }
  typeItem.children[1].innerHTML = '';
  if (typObj.length) {
    // typeItem.children[1].innerHTML = '';
    countFiltrItem('glcTerritory', typeItem);
    ls = localStorage.getItem('glcTerritory');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.territory.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcTerritory\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrTerritoryArchive(JSON.parse(glamping_club_ajax.glAll));
var filtrSafetyArchive = function filtrSafetyArchive(glempAll) {
  var typeItem = document.querySelector('.filtr-item.safety');
  if (!typeItem) return;
  typeItem.style.display = '';
  var typObj = [];
  if (glempAll.length > 1) {
    glempAll.forEach(function (item) {
      typObj = typObj.concat(item.safety);
    });
    typObj = typObj.reduce(function (acc, i) {
      return i ? [].concat(_toConsumableArray(acc), [i]) : acc;
    }, []);
    typObj = makeUniqSort(typObj);
  } else {
    typObj = glempAll[0].safety;
  }
  if (typObj.length) {
    typeItem.children[1].innerHTML = '';
    countFiltrItem('glcSafety', typeItem);
    ls = localStorage.getItem('glcSafety');
    var chek = '';
    typObj.forEach(function (item) {
      if (ls) {
        if (ls.includes(item)) {
          chek = 'checked';
        } else {
          chek = '';
        }
      }
      var count = glempAll.filter(function (elem) {
        return elem.safety.includes(item);
      });
      typeItem.children[1].insertAdjacentHTML("beforeend", "<li>\n                    <input type=\"checkbox\" id=\"".concat(item, "\" name=\"").concat(item, "\" data-name=\"glcSafety\" value=\"\" ").concat(chek, ">\n                    <label for=\"").concat(item, "\">\n                        <span class=\"checkmark fcheckbox\">\n                            <svg width=\"12\" height=\"12\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n                                <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"></path>\n                            </svg>\n                        </span>\n                        <span class=\"name\">").concat(item, "</span>\n                        <span class=\"count\">").concat(count.length, "</span>\n                    </label>\n                    <span></span>\n                </li>"));
    });
  } else {
    typeItem.children[1].innerHTML = '';
    typeItem.style.display = 'none';
  }
};
filtrSafetyArchive(JSON.parse(glamping_club_ajax.glAll));
function sliderNumber(startMin, startMax, min, max) {
  var slider = document.getElementById('glc-slider');
  if (!slider) return;
  var minPriceInput = document.getElementById('min_price');
  var maxPriceInput = document.getElementById('max_price');
  var icon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n    <path d=\"M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z\"/>\n    </svg>";
  noUiSlider.create(slider, {
    start: [startMin, startMax],
    connect: true,
    range: {
      'min': min,
      'max': max
    }
  });
  var sliderValueStart = slider.noUiSlider.get();
  localStorage.setItem('glcPrice', sliderValueStart.map(Number));
  localStorage.setItem('glcPriceSt', sliderValueStart.map(Number));
  // console.dir(sliderValueStart);
  slider.noUiSlider.on('update', function () {
    var sliderValue = slider.noUiSlider.get();
    minPriceInput.value = Math.ceil(sliderValue[0]);
    maxPriceInput.value = Math.ceil(sliderValue[1]);
  });
  slider.noUiSlider.on('end', function (values, handle) {
    console.dir(handle);
    console.dir(Number(values[handle]).toFixed());
    console.dir(values.map(Number).map(function (elem) {
      return elem.toFixed();
    }));
    var glampingsMap = document.querySelector('.glampings-map');
    var sliderValue = slider.noUiSlider.get();
    console.dir(sliderValue.map(Number).map(function (elem) {
      return elem.toFixed();
    }));
    var glempAll = JSON.parse(glamping_club_ajax.glAll);
    var newgGempAll = glempAll.filter(filtrOptionsChange).filter(priceRange, sliderValue);
    glempRender(newgGempAll);
    localStorage.setItem('glcPrice', sliderValue.map(Number).map(function (elem) {
      return elem.toFixed();
    }));
    if (handle == '0') {
      localStorage.setItem('glcPriceMin', Math.ceil(sliderValue[0]));
    }
    if (handle == '1') {
      localStorage.setItem('glcPriceMax', Math.ceil(sliderValue[1]));
    }
    // localStorage.setItem('glcPriceMin', Math.ceil(sliderValue[0]));
    // localStorage.setItem('glcPriceMax', Math.ceil(sliderValue[1]));

    var sliderValueStartStr = sliderValueStart.map(Number).join(',');
    var sliderValueStr = sliderValue.map(Number).join(',');
    console.dir(sliderValueStartStr);
    console.dir(sliderValueStr);
    var names = ['glcType', 'glcAllocation', 'glcWorking', 'glcNature', 'glcFacilGen', 'glcFacilChildren', 'glcEntertainment', 'glcTerritory', 'glcSafety'];
    var inputs = document.querySelectorAll('.glampings-filtr-items input');
    if (itemsVal(inputs, names) || sliderValueStartStr !== sliderValueStr) {
      locationsArchive(newgGempAll);
    } else {
      locationsArchive(glempAll);
    }
    filtrTypeArchive(newgGempAll);
    filtrAllocationArchive(newgGempAll);
    filtrWorkingArchive(newgGempAll);
    filtrNatureArchive(newgGempAll);
    filtrFacilitiesGeneralArchive(newgGempAll);
    filtrChildrenArchive(newgGempAll);
    filtrErtainmentArchive(newgGempAll);
    filtrTerritoryArchive(newgGempAll);
    filtrSafetyArchive(newgGempAll);
    glampingsMap.children[0].innerHTML = '';
    mapRender(mapPointTest(newgGempAll));

    // console.dir(slider.parentElement.previousElementSibling.previousElementSibling.children[1]);

    if (isArraysEqual(sliderValueStart, sliderValue)) {
      slider.parentElement.previousElementSibling.previousElementSibling.children[1].innerHTML = '';
    } else {
      slider.parentElement.previousElementSibling.previousElementSibling.children[1].innerHTML = icon;
    }
    chekAllFitrs();
  });
}
// sliderNumber(2000, 8000, 2000, 8000);

function isArraysEqual(firstArray, secondArray) {
  return firstArray.toString() === secondArray.toString();
}
function chekAllFitrs() {
  var filtrItems = document.querySelectorAll('.filtr-item__title__count');
  if (!filtrItems.length) return;
  var btnFiltrClear = document.querySelectorAll('#all-filter-clear');
  var countObj = [];
  filtrItems.forEach(function (item) {
    if (item.innerHTML) {
      countObj.push(item.innerHTML);
    }
  });
  if (countObj.length) {
    btnFiltrClear.forEach(function (btn) {
      btn.classList.add('activate');
    });
  } else {
    btnFiltrClear.forEach(function (btn) {
      btn.classList.remove('activate');
    });
  }
  return countObj.length;
}
// chekAllFitrs();

function removeAllFitrs() {
  var btnFiltrClear = document.querySelectorAll('#all-filter-clear');
  if (!btnFiltrClear.length) return;
  var priceCount = document.querySelector('.filtr-item.price .filtr-item__title__count');
  var glampingsMap = document.querySelector('.glampings-map');
  btnFiltrClear.forEach(function (btn) {
    btn.addEventListener('click', function (e) {
      localStorage.removeItem('glcRegion');
      localStorage.removeItem('glcType');
      localStorage.removeItem('glcAllocation');
      localStorage.removeItem('glcWorking');
      localStorage.removeItem('glcNature');
      localStorage.removeItem('glcFacilGen');
      localStorage.removeItem('glcFacilChildren');
      localStorage.removeItem('glcEntertainment');
      localStorage.removeItem('glcTerritory');
      localStorage.removeItem('glcSafety');
      // localStorage.removeItem('glcPrice');
      // localStorage.removeItem('glcPriceSt');
      localStorage.removeItem('glcPriceMin');
      localStorage.removeItem('glcPriceMax');
      // localStorage.removeItem('glcPrice');

      var glempAll = JSON.parse(glamping_club_ajax.glAll);
      localStorage.setItem('glcPrice', priceSliderOption(glempAll));
      locationsArchive(glempAll);
      filtrTypeArchive(glempAll);
      filtrAllocationArchive(glempAll);
      filtrWorkingArchive(glempAll);
      filtrNatureArchive(glempAll);
      filtrFacilitiesGeneralArchive(glempAll);
      filtrChildrenArchive(glempAll);
      filtrErtainmentArchive(glempAll);
      filtrTerritoryArchive(glempAll);
      filtrSafetyArchive(glempAll);
      glempRender(glempAll);
      glampingsMap.children[0].innerHTML = '';
      mapRender(mapPointTest(glempAll));
      sliderUpdatePrice(glempAll);
      priceCount.innerHTML = '';
      btnFiltrClear.forEach(function (btn) {
        btn.classList.remove('activate');
      });

      // btnFiltrClear.classList.remove('activate');
    });
  });
}
removeAllFitrs();
function priceSliderRender(arr) {
  var pricesObj = [];
  var priceMin = '';
  var priceMax = '';
  if (arr.length > 1) {
    arr.forEach(function (item) {
      pricesObj = pricesObj.concat(item.price);
    });
    pricesObj = makeUniqSort(pricesObj);
    priceMin = Math.min.apply(null, pricesObj);
    priceMax = Math.max.apply(null, pricesObj);
  } else {
    pricesObj = arr[0].price;
    priceMin = pricesObj;
    priceMax = pricesObj;
  }
  sliderNumber(priceMin, priceMax, priceMin, priceMax);
  return {
    priceMin: priceMin,
    priceMax: priceMax
  };
}
// priceSliderRender(JSON.parse(glamping_club_ajax.glAll));
priceSliderRender(JSON.parse(glamping_club_ajax.glAll));
function priceSliderOption(arr) {
  var pricesObj = [];
  var priceMin = '';
  var priceMax = '';
  if (arr.length > 1) {
    arr.forEach(function (item) {
      pricesObj = pricesObj.concat(item.price);
    });
    pricesObj = makeUniqSort(pricesObj);
    priceMin = Math.min.apply(null, pricesObj);
    priceMax = Math.max.apply(null, pricesObj);
  } else {
    pricesObj = arr[0].price;
    priceMin = pricesObj;
    priceMax = pricesObj;
  }
  return [priceMin, priceMax];
}
function sliderUpdatePrice(arr) {
  var slider = document.getElementById('glc-slider');
  var pricesObj = [];
  var priceMin = '';
  var priceMax = '';
  if (arr.length > 1) {
    arr.forEach(function (item) {
      pricesObj = pricesObj.concat(item.price);
    });
    pricesObj = makeUniqSort(pricesObj);
    priceMin = Math.min.apply(null, pricesObj.map(Number));
    priceMax = Math.max.apply(null, pricesObj.map(Number));
  } else {
    pricesObj = arr[0].price;
    priceMin = +pricesObj;
    priceMax = +pricesObj;
  }
  var glempAll = JSON.parse(glamping_club_ajax.glAll);
  var currPrice = [];
  currPrice = localStorage.getItem('glcPrice').split(',').map(Number);
  var currPriceMin = localStorage.getItem('glcPriceMin');
  var currPriceMax = localStorage.getItem('glcPriceMax');
  var stPriceMin = '';
  var stPriceMax = '';
  if (currPriceMin) {
    stPriceMin = currPriceMin;
  } else {
    stPriceMin = currPrice[0];
  }
  if (currPriceMax) {
    stPriceMax = currPriceMax;
  } else {
    stPriceMax = currPrice[1];
  }
  slider.noUiSlider.updateOptions({
    start: [stPriceMin, stPriceMax],
    range: {
      'min': priceMin,
      'max': priceMax
    }
  });
  var priceObj = [priceMin, priceMax];
  // localStorage.setItem('glcPrice', priceObj);

  return priceObj;
}
function removeDuplicates(arr) {
  var locationsById = function () {
    return arr.reduce(function (acc, n) {
      var _n$location_id, _acc$_n$location_id;
      return ((_acc$_n$location_id = acc[_n$location_id = n.location_id]) !== null && _acc$_n$location_id !== void 0 ? _acc$_n$location_id : acc[_n$location_id] = []).push(n), acc;
    }, {});
  }(arr);
  function getRandom(val) {
    return val[Math.floor(Math.random() * val.length)];
  }
  return Object.values(locationsById).map(getRandom);
}
function itemsChange() {
  var filtrItems = document.querySelector('.glampings-filtr-items');
  var glampingsMap = document.querySelector('.glampings-map');
  if (!filtrItems) return;
  filtrItems.addEventListener('click', function (event) {
    var inputs = filtrItems.querySelectorAll('input');
    var input = event.target.closest('input');
    var glcType = localStorage.getItem('glcType');
    var glcAllocation = localStorage.getItem('glcAllocation');
    var glcWorking = localStorage.getItem('glcWorking');
    var glcNature = localStorage.getItem('glcNature');
    var glcFacilGen = localStorage.getItem('glcFacilGen');
    var glcFacilChildren = localStorage.getItem('glcFacilChildren');
    var glcEntertainment = localStorage.getItem('glcEntertainment');
    var glcTerritory = localStorage.getItem('glcTerritory');
    var glcSafety = localStorage.getItem('glcSafety');
    var glcPrice = localStorage.getItem('glcPrice');
    var glcPriceSt = localStorage.getItem('glcPriceSt');
    var names = ['glcType', 'glcAllocation', 'glcWorking', 'glcNature', 'glcFacilGen', 'glcFacilChildren', 'glcEntertainment', 'glcTerritory', 'glcSafety'];
    if (input) {
      var glempAll = JSON.parse(glamping_club_ajax.glAll);
      var newgGempAll = glempAll.filter(filtrOptionsChange);
      sliderUpdatePrice(newgGempAll);
      // sliderUpdatePriceNew(glcPrice);
      var sliderValueStart = priceSliderOption(glempAll);
      // console.dir(sliderValueStart);

      var priceObj = [];
      // let glcPrice = localStorage.getItem('glcPrice');
      if (glcPrice) {
        priceObj = glcPrice.split(',');
        // sliderUpdatePriceNew(glcPrice);
      }
      newgGempAll = glempAll.filter(filtrOptionsChange).filter(priceRange, priceObj.map(Number));
      var sortGl = Cookies.get('glcSort');
      if (sortGl) {
        if (sortGl == 'new_items') {
          newgGempAll.sort(function (x, y) {
            return y.post_date - x.post_date;
          });
        } else if (sortGl == 'recommended') {
          newgGempAll.sort(function (x, y) {
            return y.recommended - x.recommended;
          });
        } else if (sortGl == 'max_price') {
          newgGempAll.sort(function (x, y) {
            return y.price - x.price;
          });
        } else if (sortGl == 'min_price') {
          newgGempAll.sort(function (x, y) {
            return x.price - y.price;
          });
        }
        // else if (sortGl == 'popular') {
        //     newgGempAll.sort((x, y) => y.views - x.views);
        // } else if (sortGl == 'rating') {
        //     newgGempAll.sort((x, y) => y.review_rating - x.review_rating || y.review_count - x.review_count);
        // }
      }
      glempRender(newgGempAll);
      checkLocalCheng(input, input.dataset.name, '');
      // console.dir(input.dataset.name);
      if (input.dataset.name == 'glcRegion') {
        // locationsArchive(newgGempAll);
        filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcType') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }

        // filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcAllocation') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }
        filtrTypeArchive(newgGempAll);
        // filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcWorking') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }
        filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        // filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcNature') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }
        filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        // filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcFacilGen') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }
        filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        // filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcFacilChildren') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }
        filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        // filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcEntertainment') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }
        filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        // filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcTerritory') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }
        filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        // filtrTerritoryArchive(newgGempAll);
        filtrSafetyArchive(newgGempAll);
      }
      if (input.dataset.name == 'glcSafety') {
        if (itemsVal(inputs, names) || glcPrice !== glcPriceSt) {
          locationsArchive(newgGempAll);
        } else {
          locationsArchive(glempAll);
        }
        filtrTypeArchive(newgGempAll);
        filtrAllocationArchive(newgGempAll);
        filtrWorkingArchive(newgGempAll);
        filtrNatureArchive(newgGempAll);
        filtrFacilitiesGeneralArchive(newgGempAll);
        filtrChildrenArchive(newgGempAll);
        filtrErtainmentArchive(newgGempAll);
        filtrTerritoryArchive(newgGempAll);
        // filtrSafetyArchive(newgGempAll);
      }
      glampingsMap.children[0].innerHTML = '';
      mapRender(mapPointTest(newgGempAll));
      chekAllFitrs();
      console.dir(itemsVal(inputs, names));
    }
  });
}
itemsChange();
function itemsVal(inputs, names) {
  var inputChecked = [];
  var inputCheckedName = [];
  inputs.forEach(function (input) {
    if (input.checked == true) {
      inputChecked.push(input);
      inputCheckedName.push(input.dataset.name);
    }
  });
  // return inputChecked;
  var checkedName = makeUniq(inputCheckedName);
  var elExists = checkedName.some(function (el) {
    return names.includes(el);
  });
  return elExists;
}
function checkLocalCheng(item, lsName, filtrItemCount) {
  var ls_obj = [];
  var ls_obj_new = [];
  if (localStorage.getItem(lsName)) {
    ls = localStorage.getItem(lsName);
    if (ls.includes(',')) {
      ls_obj = ls.split(',');
      if (item.checked == false) {
        var _ls_obj_new = ls_obj.filter(function (e) {
          return e !== item.name;
        });
        if (_ls_obj_new.length == 0) {
          localStorage.removeItem(lsName);
        } else {
          localStorage.setItem(lsName, _ls_obj_new);
        }
      } else {
        ls_obj.push(item.name);
        ls_obj_new = ls_obj; //.slice();
        localStorage.setItem(lsName, ls_obj_new);
      }
    } else {
      ls_obj.push(ls);
      if (item.checked == false && item.name == ls) {
        localStorage.removeItem(lsName);
      } else {
        ls_obj.push(item.name);
        var _ls_obj_new2 = ls_obj.join(',');
        localStorage.setItem(lsName, _ls_obj_new2);
      }
    }
  } else {
    ls_obj.push(item.name);
    var _ls_obj_new3 = ls_obj.join(',');
    localStorage.setItem(lsName, _ls_obj_new3);
  }
  lsf = localStorage.getItem(lsName);
  ls_objf = [];
  if (lsf) {
    if (lsf.includes(',')) {
      ls_objf = lsf.split(',');
      if (ls_objf.length == 0) {
        item.parentElement.parentElement.previousElementSibling.children[1].innerText = '';
      } else {
        item.parentElement.parentElement.previousElementSibling.children[1].innerText = ls_objf.length;
      }
    } else {
      item.parentElement.parentElement.previousElementSibling.children[1].innerText = 1;
    }
  } else {
    item.parentElement.parentElement.previousElementSibling.children[1].innerText = '';
  }
}
function countFiltrItem(name, countSelector) {
  lsf = localStorage.getItem(name);
  ls_objf = [];
  if (lsf) {
    if (lsf.includes(',')) {
      ls_objf = lsf.split(',');
      if (ls_objf.length == 0) {
        countSelector.children[0].children[1].innerText = '';
      } else {
        countSelector.children[0].children[1].innerText = ls_objf.length;
      }
    } else {
      countSelector.children[0].children[1].innerText = 1;
    }
  } else {
    countSelector.children[0].children[1].innerText = '';
  }
}
function filtrOptionsChange(item, index, arr) {
  var inputs = document.querySelectorAll('.glampings-filtr-items input');
  var region = [];
  var types = [];
  var allocation = [];
  var working = [];
  var nature = [];
  var facilGen = [];
  var facilChildren = [];
  var entertainment = [];
  var territory = [];
  var safety = [];
  inputs.forEach(function (input) {
    if (input.checked == true) {
      if (input.dataset.name == 'glcRegion') {
        region.push(input.id);
      } else if (input.dataset.name == 'glcType') {
        types.push(input.id);
      } else if (input.dataset.name == 'glcAllocation') {
        allocation.push(input.id);
      } else if (input.dataset.name == 'glcWorking') {
        working.push(input.id);
      } else if (input.dataset.name == 'glcNature') {
        nature.push(input.id);
      } else if (input.dataset.name == 'glcFacilGen') {
        facilGen.push(input.id);
      } else if (input.dataset.name == 'glcFacilChildren') {
        facilChildren.push(input.id);
      } else if (input.dataset.name == 'glcEntertainment') {
        entertainment.push(input.id);
      } else if (input.dataset.name == 'glcTerritory') {
        territory.push(input.id);
      } else if (input.dataset.name == 'glcSafety') {
        safety.push(input.id);
      }
    }
  });
  var regionIncl = 1;
  if (region.length) {
    regionIncl = region.map(Number).includes(item.location_id);
  }
  var typesIncl = 1;
  if (types.length) {
    typesIncl = types.some(function (element) {
      return item.type.includes(element);
    });
  }
  var allocationIncl = 1;
  if (allocation.length) {
    typesIncl = allocation.some(function (element) {
      return item.allocation.includes(element);
    });
  }
  var workingIncl = 1;
  if (working.length) {
    workingIncl = working.some(function (element) {
      return item.working_mode_seasons.includes(element);
    });

    // workingIncl = working.some((element) => {
    //     if (element == 'whole_year') {
    //         item.working_mode.includes(element);
    //     } else {
    //         item.working_mode_seasons.includes(element);
    //     }
    // });
  }
  var natureIncl = 1;
  if (nature.length) {
    natureIncl = nature.some(function (element) {
      return item.nature_around.includes(element);
    });
  }
  var facilGenIncl = 1;
  if (facilGen.length) {
    facilGenIncl = facilGen.some(function (element) {
      return item.facilities_general.includes(element);
    });
  }
  var facilChildrenIncl = 1;
  if (facilChildren.length) {
    facilChildrenIncl = facilChildren.some(function (element) {
      return item.facilities_children.includes(element);
    });
  }
  var entertainmentIncl = 1;
  if (entertainment.length) {
    entertainmentIncl = entertainment.some(function (element) {
      return item.entertainment.includes(element);
    });
  }
  var territoryIncl = 1;
  if (territory.length) {
    territoryIncl = territory.some(function (element) {
      return item.territory.includes(element);
    });
  }
  var safetyIncl = 1;
  if (safety.length) {
    safetyIncl = safety.some(function (element) {
      return item.safety.includes(element);
    });
  }
  if (regionIncl && typesIncl && allocationIncl && workingIncl && natureIncl && facilGenIncl && facilChildrenIncl && entertainmentIncl && territoryIncl && safetyIncl) {
    return true;
  } else {
    return false;
  }
}
function priceRange(item) {
  if (Number(item.price) >= this[0] && Number(item.price) <= this[1]) {
    return item;
  }
}
function glempRender(glemps) {
  var glampingsItems = document.querySelector('.glampings-items');
  var glcFav = favoritesRender('glcFav');
  var glcCompar = favoritesRender('glcCompar');
  glampingsItems.innerHTML = '';
  glemps.forEach(function (glemp) {
    var recommended = glemp.recommended;
    var recRend = "";
    if (recommended == 'yes') {
      recRend = "<div class=\"glamping-item__recommended\">\u0420\u0435\u043A\u043E\u043C\u0435\u043D\u0434\u0443\u0435\u043C</div>";
    }
    var price = currFormat(glemp.price);
    var type = glemp.type.join(', ');
    var clFav = '';
    var clCompar = '';
    var titleFav = 'Добавить в избранное';
    var titleCompar = 'Добавить к сравнению';
    if (glcFav.includes(glemp.id)) {
      clFav = ' active';
      titleFav = 'Удалить из избранного';
    }
    if (glcCompar.includes(glemp.id)) {
      clCompar = ' active';
      titleCompar = 'Удалить из сравнения';
    }
    var slider = "";
    glemp.media_urls.forEach(function (item) {
      slider += "<div class=\"swiper-slide\"><img src=\"".concat(item, "\" alt=\"\" loading=\"lazy\" /></div>");
    });
    var rating = reviews_stars_items_average(2.9, 4);
    glampingsItems.insertAdjacentHTML("beforeEnd", "<div id=\"post-".concat(glemp.id, "\" class=\"glamping-item\" title=\"").concat(glemp.title, "\">\n            \t<a href=\"").concat(glemp.url, "\" class=\"glamping-item__url\" rel=\"bookmark\"></a>\n                ").concat(recRend, "\n                <div class=\"glamping-item__btns-fav-comp\">\n            \t\t<button id=\"add-favorites\" data-postid=\"").concat(glemp.id, "\" class=\"glamping-item__btns-fav-comp__btn-add-fav round-sup-red").concat(clFav, "\" type=\"button\" name=\"button\" title=\"").concat(titleFav, "\">\n            \t\t\t<svg width=\"40\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            \t\t\t\t<path d=\"M0 190.9V185.1C0 115.2 50.52 55.58 119.4 44.1C164.1 36.51 211.4 51.37 244 84.02L256 96L267.1 84.02C300.6 51.37 347 36.51 392.6 44.1C461.5 55.58 512 115.2 512 185.1V190.9C512 232.4 494.8 272.1 464.4 300.4L283.7 469.1C276.2 476.1 266.3 480 256 480C245.7 480 235.8 476.1 228.3 469.1L47.59 300.4C17.23 272.1 .0003 232.4 .0003 190.9L0 190.9z\"/>\n            \t\t\t</svg>\n            \t\t</button>\n            \t\t<button id=\"add-comparison\" data-postid=\"").concat(glemp.id, "\" class=\"glamping-item__btns-fav-comp__btn-add-comp round-sup-red").concat(clCompar, "\" type=\"button\" name=\"button\" title=\"").concat(titleCompar, "\">\n            \t\t\t<svg class=\"rotate90\" width=\"40\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\">\n            \t\t\t\t<path d=\"M448 64c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32zm0 256c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32zM0 192c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z\"/>\n            \t\t\t</svg>\n            \t\t</button>\n            \t</div>\n            \t<div class=\"glamping-item__thumbnail\">\n                    <div id=\"slider-post-").concat(glemp.id, "\" class=\"swiper slider-post-").concat(glemp.id, "\">\n                        <div class=\"swiper-wrapper\">").concat(slider, "</div>\n                    \t<div class=\"swiper-button-next\"></div>\n                    \t<div class=\"swiper-button-prev\"></div>\n                    \t<div class=\"swiper-pagination\"></div>\n                    </div>\n            \t</div>\n            \t<div class=\"glamping-item__content\">\n            \t\t<div class=\"glamping-item__content__left\">\n            \t\t\t<div class=\"glamping-item__content__title\">").concat(glemp.title, "</div>\n            \t\t\t<div class=\"glamping-item__content__rating\">").concat(rating, "</div>\n            \t\t\t<div class=\"glamping-item__content__bottom\">\n            \t\t\t\t<div class=\"glamping-item__content__bottom__type\">\n            \t\t\t\t\t<svg width=\"10\" height=\"10\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\">\n                                    <path d=\"M394.3 3.745C401.1 9.425 401.9 19.52 396.3 26.29L308.9 130.4L532.8 397.2C540 405.8 544 416.7 544 428V464C544 490.5 522.5 512 496 512H80C53.49 512 32 490.5 32 464V428C32 416.7 35.98 405.8 43.23 397.2L267.1 130.4L179.7 26.29C174.1 19.52 174.9 9.425 181.7 3.745C188.5-1.936 198.6-1.054 204.3 5.715L287.1 105.5L371.7 5.715C377.4-1.054 387.5-1.936 394.3 3.745H394.3zM64 428V464C64 472.8 71.16 480 80 480H129.9L275.4 294.1C278.4 290.3 283.1 288 288 288C292.9 288 297.6 290.3 300.6 294.1L446.1 480H496C504.8 480 512 472.8 512 464V428C512 424.2 510.7 420.6 508.3 417.7L288 155.3L67.74 417.7C65.33 420.6 64 424.2 64 428zM170.6 480H405.4L288 329.1L170.6 480z\"></path>\n                                </svg>\n            \t\t\t\t\t").concat(type, "\n            \t\t\t\t</div>\n            \t\t\t\t<div class=\"glamping-item__content__bottom__address\">\n            \t\t            <a href=\"#map-container\" title=\"\u041D\u0430 \u043A\u0430\u0440\u0442\u0435\">\n            \t\t                <svg width=\"10\" height=\"10\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            \t\t                    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 2C9.87827 2 7.84344 2.84285 6.34315 4.34315C4.84285 5.84344 4 7.87827 4 10C4 13.0981 6.01574 16.1042 8.22595 18.4373C9.31061 19.5822 10.3987 20.5195 11.2167 21.1708C11.5211 21.4133 11.787 21.6152 12 21.7726C12.213 21.6152 12.4789 21.4133 12.7833 21.1708C13.6013 20.5195 14.6894 19.5822 15.774 18.4373C17.9843 16.1042 20 13.0981 20 10C20 7.87827 19.1571 5.84344 17.6569 4.34315C16.1566 2.84285 14.1217 2 12 2ZM12 23C11.4453 23.8321 11.445 23.8319 11.4448 23.8317L11.4419 23.8298L11.4352 23.8253L11.4123 23.8098C11.3928 23.7966 11.3651 23.7776 11.3296 23.753C11.2585 23.7038 11.1565 23.6321 11.0278 23.5392C10.7705 23.3534 10.4064 23.0822 9.97082 22.7354C9.10133 22.043 7.93939 21.0428 6.77405 19.8127C4.48426 17.3958 2 13.9019 2 10C2 7.34784 3.05357 4.8043 4.92893 2.92893C6.8043 1.05357 9.34784 0 12 0C14.6522 0 17.1957 1.05357 19.0711 2.92893C20.9464 4.8043 22 7.34784 22 10C22 13.9019 19.5157 17.3958 17.226 19.8127C16.0606 21.0428 14.8987 22.043 14.0292 22.7354C13.5936 23.0822 13.2295 23.3534 12.9722 23.5392C12.8435 23.6321 12.7415 23.7038 12.6704 23.753C12.6349 23.7776 12.6072 23.7966 12.5877 23.8098L12.5648 23.8253L12.5581 23.8298L12.556 23.8312C12.5557 23.8314 12.5547 23.8321 12 23ZM12 23L12.5547 23.8321C12.2188 24.056 11.7807 24.0556 11.4448 23.8317L12 23Z\" fill=\"black\"></path>\n            \t\t                    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 8C10.8954 8 10 8.89543 10 10C10 11.1046 10.8954 12 12 12C13.1046 12 14 11.1046 14 10C14 8.89543 13.1046 8 12 8ZM8 10C8 7.79086 9.79086 6 12 6C14.2091 6 16 7.79086 16 10C16 12.2091 14.2091 14 12 14C9.79086 14 8 12.2091 8 10Z\" fill=\"black\"></path>\n            \t\t                </svg>\n            \t\t                ").concat(glemp.adress, "\n            \t\t            </a>\n            \t\t        </div>\n            \t\t\t</div>\n            \t\t</div>\n            \t\t<div class=\"glamping-item__content__right\">\n            \t\t\t<div class=\"glamping-item__content__right__price\">\n            \t\t\t\t<span class=\"price-number\">").concat(price, "</span>\n            \t\t\t\t<span class=\"price-text\">\u0437\u0430 1 \u043D\u043E\u0447\u044C</span>\n            \t\t\t</div>\n            \t\t\t<div class=\"glamping-item__content__right__btn\">\n            \t\t\t\t<button class=\"primary ld w100 btnvib\" type=\"button\" name=\"button\">\u0432\u044B\u0431\u0440\u0430\u0442\u044C</button>\n            \t\t\t</div>\n            \t\t</div>\n            \t</div>\n            </div>"));
  });
  sliderInit();
}
function makeUniq(arr) {
  return _toConsumableArray(new Set(arr));
}
function makeUniqSort(arr) {
  return _toConsumableArray(new Set(arr)).sort();
}
function makeUniqNum(arr) {
  return _toConsumableArray(new Set(arr)).sort(function (a, b) {
    return a - b;
  });
}
function myGeeks(array) {
  var filtered = array.filter(function (el) {
    return el != null;
  });
}
function currFormat(num) {
  var nf = Intl.NumberFormat('ru-RU', {
    'currency': 'RUB',
    style: "currency",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(num);
  return nf;
}
function montsSort(arr) {
  var monts = [];
  arr.forEach(function (mont) {
    if (mont == 'Весь год') {
      monts[0] = 'Весь год';
    }
    if (mont == 'январь') {
      monts[1] = 'январь';
    }
    if (mont == 'февраль') {
      monts[2] = 'февраль';
    }
    if (mont == 'март') {
      monts[3] = 'март';
    }
    if (mont == 'апрель') {
      monts[4] = 'апрель';
    }
    if (mont == 'май') {
      monts[5] = 'май';
    }
    if (mont == 'июнь') {
      monts[6] = 'июнь';
    }
    if (mont == 'июль') {
      monts[7] = 'июль';
    }
    if (mont == 'август') {
      monts[8] = 'август';
    }
    if (mont == 'сентябрь') {
      monts[9] = 'сентябрь';
    }
    if (mont == 'октябрь') {
      monts[10] = 'октябрь';
    }
    if (mont == 'ноябрь') {
      monts[11] = 'ноябрь';
    }
    if (mont == 'декабрь') {
      monts[12] = 'декабрь';
    }
  });
  return monts;
}
function favoritesRender(name) {
  var glcFav = Cookies.get(name);
  var glcFav_obj = [];
  if (glcFav) {
    glcFav_obj = glcFav.split(',').map(Number);
  }
  return glcFav_obj;
}
function sliderArchiveGlampings(elem) {
  var mySl = new Swiper(elem, {
    loop: true,
    navigation: {
      nextEl: ".swiper-button-next",
      prevEl: ".swiper-button-prev"
    },
    pagination: {
      el: ".swiper-pagination",
      clickable: true
    }
  });
}
function sliderInit() {
  var sliders = document.querySelectorAll('.glamping-item');
  if (!sliders.length) return;
  sliders.forEach(function (item) {
    var sl = '.slider-' + item.id;
    sliderArchiveGlampings(sl);
  });
}
sliderInit();
function mapRender(geoData) {
  var archiveGlampings = document.querySelector('#archive-glampings');
  if (!archiveGlampings) return;
  ymaps.ready(init);
  function init() {
    var map;
    var geoJson = geoData; //JSON.parse(glamping_club_ajax.glAllMap);
    var zoomNum = glamping_club_ajax.yand_zoom ? Number(glamping_club_ajax.yand_zoom) : 12;
    map = new ymaps.Map('mapYandex', {
      center: [54.9924, 73.3686],
      zoom: zoomNum,
      controls: ['zoomControl' /*'fullscreenControl'*/]
    }, {
      suppressMapOpenBlock: true,
      balloonPanelMaxMapArea: 390000
      // balloonPanelMaxMapArea: Infinity
      // balloonMaxWidth: 270
    }),
    // map.behaviors.disable(['scrollZoom']);

    MyPanelContentLayout = ymaps.templateLayoutFactory.createClass('$[properties.balloonContentBodyPan]'), objectManager = new ymaps.ObjectManager({
      clusterize: true,
      gridSize: 64
      // viewportMargin: 50
      // clusterDisableClickZoom: true
    });
    objectManager.clusters.options.set({
      preset: 'islands#darkGreenClusterIcons',
      clusterIconColor: '#1921B1'
    }); //  , clusterIconColor: '#00ABAA'
    objectManager.objects.options.set({
      iconLayout: 'default#imageWithContent',
      iconImageHref: '',
      iconImageSize: [80, 24],
      iconImageOffset: [-40, -30]
    }
    // {preset: 'islands#darkGreenStretchyIcon'}
    ); //  islands#greenMountainIcon, iconColor: '#00ABAA'
    objectManager.add(geoJson);
    map.geoObjects.add(objectManager);
    objectManager.objects.options.set({
      balloonPanelContentLayout: MyPanelContentLayout
    });
    if (geoData.features.length == 1) {
      map.setCenter(map.geoObjects.getBounds()[0], 14, {
        checkZoomRange: true
      });
    } else {
      map.setBounds(map.geoObjects.getBounds(), {
        checkZoomRange: true,
        zoomMargin: 9,
        useMapMargin: true
      });
    }
    map.geoObjects.events.add('mouseenter', function (e) {
      var id = e.get('objectId');
      // let geoObject = objectManager.objects.getById(id);
      // console.dir(id);

      var markerst = document.querySelectorAll('.ymaps-2-1-79-map .glc-icon-content');
      markerst.forEach(function (item) {
        if (item.id == id) {
          item.classList.add('active');
        }
      });
    });
    map.geoObjects.events.add('mouseleave', function (e) {
      var id = e.get('objectId');
      var markerst = document.querySelectorAll('.ymaps-2-1-79-map .glc-icon-content');
      markerst.forEach(function (item) {
        if (item.id == id) {
          item.classList.remove('active');
        }
      });
    });
  }
  markersHover();
}
mapRender(JSON.parse(glamping_club_ajax.glAllMap));
var mapPointTest = function mapPointTest(glAll) {
  // console.dir(glAll);
  var points = [];
  glAll.forEach(function (item) {
    var itemUrl = item.url;
    var media_urls = item.media_urls;
    var media = '';
    var mi = 0;
    media_urls.forEach(function (media_url) {
      if (mi <= 2) {
        media += "<img width=\"60\" height=\"60\" src=\"".concat(media_url, "\" class=\"attachment-map-image\" alt=\"\" decoding=\"async\">");
      }
      mi++;
    });
    var thumb = "<img width=\"120\" height=\"120\" src=\"".concat(media_urls[0], "\" class=\"attachment-map-image\" alt=\"\" decoding=\"async\">");
    var img = "<img width=\"60\" height=\"60\" src=\"".concat(item.thumbnail_url, "\" class=\"attachment-map-image\" alt=\"\" decoding=\"async\">");
    var bcb = "<div class=\"balloon-content-body\">\n        <div class=\"balloon-content-body__img\">".concat(thumb, "</div>\n        <div class=\"balloon-content-body__content\">\n        <div class=\"balloon-content-body__content__title\">\n        <a href=\"").concat(itemUrl, "\">").concat(item.title, "</a>\n        </div>\n        <div class=\"balloon-content-body__content__price\">\u043E\u0442 ").concat(item.price, "\u0440.</div>\n        <div class=\"balloon-content-body__content__address\">").concat(item.adress, "</div>\n        </div>\n        </div>");
    var bcbp = "<div class=\"balloon-content-body-pan\">\n        <div class=\"balloon-content-body-pan__title\"><a href=\"".concat(itemUrl, "\">").concat(item.title, "</a></div>\n        <div class=\"balloon-content-body-pan__img\">\n        <a href=\"").concat(itemUrl, "\" class=\"balloon-content-body-pan__img__link\"></a>\n        <div class=\"balloon-content-body-pan__img__count\">").concat(media_urls.length, " \u0444\u043E\u0442\u043E</div>\n        ").concat(media, "\n        </div>\n        <div class=\"balloon-content-body-pan__content\">\n        <div class=\"balloon-content-body-pan__content__price\">\u043E\u0442 ").concat(item.price, "\u0440.</div>\n        <div class=\"balloon-content-body-pan__content__address\">").concat(item.adress, "</div>\n        <div class=\"balloon-content-body-pan__content__buttons\"></div>\n        </div>\n        </div>");
    var coord = [];
    points.push({
      id: item.id,
      type: "Feature",
      geometry: {
        type: "Point",
        coordinates: item.coordinates.split(', ')
      },
      properties: {
        id: item.id,
        price: item.price,
        // balloonContentHeader: item.title,
        balloonContentBody: bcb,
        //`${img}<p class="ymaps-2-1-79-balloon-content__header">от ${item.price}р.</p> Адрес: ${item.adress}`,
        balloonContentBodyPan: bcbp,
        // balloonContentFooter: `<a href="${itemUrl}">Подробнее</a>`,
        // balloonContentFooter: '<a href=\"'+itemUrl+'\">Подробнее</a>',
        clusterCaption: item.title,
        link: item.url,
        hintContent: "<span>".concat(item.title, "</span>"),
        iconContent: "<span id=\"".concat(item.id, "\" class=\"glc-icon-content\">").concat(item.price, "\u0440</span>")
      }
    });
  });
  var geoData = {
    type: 'FeatureCollection',
    metadata: {
      name: 'Глэмпинги',
      creator: 'creatsites.ru',
      description: 'Глэмпинги Creatsites.'
    },
    features: points
  };
  // console.dir(geoData);
  return geoData;
};
mapPointTest(JSON.parse(glamping_club_ajax.glAll));
function refreshObjects(elementId) {
  objectManager.objects.each(function (object) {
    var isActive = object.id === elementId;
    objectManager.objects.setObjectOptions(object.id, {
      preset: isActive ? 'islands#redStretchyIcon' : 'islands#darkGreenStretchyIcon'
    });
  });
}
function backObjects() {
  objectManager.objects.each(function (object) {
    objectManager.objects.setObjectOptions(object.id, {
      preset: 'islands#darkGreenStretchyIcon'
    });
  });
}
function markersHover() {
  var glPosts = document.querySelectorAll('.glamping-item');
  glPosts.forEach(function (post) {
    var postId = post.id.split('-')[1];
    post.addEventListener('mouseenter', function () {
      var markers = document.querySelectorAll('.ymaps-2-1-79-map .glc-icon-content');
      markers.forEach(function (item) {
        if (item.id == postId) {
          item.classList.add('active');
          item.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.style.zIndex = '999';
        }
      });
    });
    post.addEventListener('mouseleave', function () {
      var markers = document.querySelectorAll('.ymaps-2-1-79-map .glc-icon-content');
      markers.forEach(function (item) {
        item.classList.remove('active');
        item.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.style.zIndex = '';
      });
    });
  });
}
function reviews_stars_items_average(average_rating, count_otziv) {
  var rating = average_rating;
  var star_full = "<svg class=\"star-full\" width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\">\n\t<path class=\"fa-secondary\" fill=\"var(--reviews-color)\" d=\"M381.2 150.3L524.9 171.5C536.8 173.2 546.8 181.6 550.6 193.1C554.4 204.7 551.3 217.3 542.7 225.9L438.5 328.1L463.1 474.7C465.1 486.7 460.2 498.9 450.2 506C440.3 513.1 427.2 514 416.5 508.3L288.1 439.8L159.8 508.3C149 514 135.9 513.1 126 506C116.1 498.9 111.1 486.7 113.2 474.7L137.8 328.1L33.58 225.9C24.97 217.3 21.91 204.7 25.69 193.1C29.46 181.6 39.43 173.2 51.42 171.5L195 150.3L259.4 17.97C264.7 6.954 275.9-.0391 288.1-.0391C300.4-.0391 311.6 6.954 316.9 17.97L381.2 150.3z\"/>\n\t</svg>";
  var star_aver = "<svg width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\">\n\t<path class=\"fa-primary\" fill=\"var(--reviews-color)\" d=\"M288 439.8L159.8 508.3C149 514 135.9 513.1 126 506C116.1 498.9 111.1 486.7 113.2 474.7L137.8 328.1L33.58 225.9C24.97 217.3 21.91 204.7 25.69 193.1C29.46 181.6 39.43 173.2 51.42 171.5L195 150.3L259.4 17.97C264.7 6.995 275.8 .0131 287.1-.0391L288 439.8zM433.2 512C432.1 512.1 431 512.1 429.9 512H433.2z\"/>\n\t<path class=\"fa-secondary\" fill=\"#d7dbe3\" d=\"M146.3 512C145.3 512.1 144.2 512.1 143.1 512H146.3zM288 439.8V-.0387L288.1-.0391C300.4-.0391 311.6 6.954 316.9 17.97L381.2 150.3L524.9 171.5C536.8 173.2 546.8 181.6 550.6 193.1C554.4 204.7 551.3 217.3 542.7 225.9L438.5 328.1L463.1 474.7C465.1 486.7 460.1 498.9 450.2 506C440.3 513.1 427.2 514 416.5 508.3L288.1 439.8L288 439.8z\"/>\n\t</svg>";
  var star_half = "<svg class=\"star-full\" width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\">\n\t<path class=\"fa-secondary\" fill=\"#d7dbe3\" d=\"M381.2 150.3L524.9 171.5C536.8 173.2 546.8 181.6 550.6 193.1C554.4 204.7 551.3 217.3 542.7 225.9L438.5 328.1L463.1 474.7C465.1 486.7 460.2 498.9 450.2 506C440.3 513.1 427.2 514 416.5 508.3L288.1 439.8L159.8 508.3C149 514 135.9 513.1 126 506C116.1 498.9 111.1 486.7 113.2 474.7L137.8 328.1L33.58 225.9C24.97 217.3 21.91 204.7 25.69 193.1C29.46 181.6 39.43 173.2 51.42 171.5L195 150.3L259.4 17.97C264.7 6.954 275.9-.0391 288.1-.0391C300.4-.0391 311.6 6.954 316.9 17.97L381.2 150.3z\"/>\n\t</svg>";
  var content = "<div class=\"rating-stars\">";

  //$full_stars = $doc_meta->rating/$doc_meta->raitcol;
  var empty_stars = Math.floor(5 - average_rating);
  while (average_rating > 0) {
    if (average_rating > 0 && average_rating - 1 >= 0) {
      content += star_full;
    }
    if (average_rating > 0 && average_rating - 1 < 0) {
      content += star_aver;
    }
    average_rating--;
  }
  while (empty_stars > 0) {
    content += star_half;
    empty_stars--;
  }
  content += "</div>";
  content += "<div class=\"rating-count\">\n\t\t<div class=\"rating-count__rating\">";
  content += rating; //.toFixed(1);
  content += "</div>\n        <div class=\"rating-count__otziv\">";
  content += "<span>/ ";
  content += count_otziv + ' ' + num_word(count_otziv, ['отзыв', 'отзыва', 'отзывов']);
  content += "</span>";
  content += "</div>\n\t    </div>";
  return content;
}
function num_word(value, words) {
  value = Math.abs(value) % 100;
  var num = value % 10;
  if (value > 10 && value < 20) return words[2];
  if (num > 1 && num < 5) return words[1];
  if (num == 1) return words[0];
  return words[2];
  // num_word(value, ['товар', 'товара', 'товаров']);
}
var listCardMap = function listCardMap() {
  var btnMap = document.querySelector('.js-btn-map');
  if (!btnMap) return;
  var glampingsItems = document.querySelector('#archive-glampings .glampings-items');
  var glampingsMap = document.querySelector('.glampings-map');
  var archGlampingsLeft = document.querySelector('.archive-glampings__left');
  var btns = btnMap.querySelectorAll('button');
  btns.forEach(function (btn) {
    btn.addEventListener('click', function (e) {
      btnMapChange(btns);
      btn.classList.add('active');
      if (btn.id == 'mapVision') {
        archGlampingsLeft.classList.remove('no-map');
        glampingsItems.classList.remove('card');
        glampingsItems.classList.add('list');
        glampingsMap.classList.add('active');
        glampingsMap.children[0].innerHTML = '';
        var glempAll = JSON.parse(glamping_club_ajax.glAll);
        var newgGempAll = glempAll.filter(filtrOptionsChange);
        var priceObj = [];
        priceObj = sliderUpdatePrice(newgGempAll);
        newgGempAll = glempAll.filter(filtrOptionsChange).filter(priceRange, priceObj);
        mapRender(mapPointTest(newgGempAll));
      } else if (btn.id == 'mapClose') {
        glampingsItems.classList.remove('list');
        glampingsItems.classList.add('card');
        glampingsMap.classList.remove('active');
        archGlampingsLeft.classList.add('no-map');
      }
      Cookies.set('glcTemp', btn.id);
    });
    // console.dir(btn);
  });
};
listCardMap();
var listCardMapMobile = function listCardMapMobile() {
  var btnMap = document.querySelector('.js-btn-map-mobile');
  if (!btnMap) return;
  var glampingsItems = document.querySelector('#archive-glampings .glampings-items');
  var glampingsMap = document.querySelector('.glampings-map');
  var archGlampingsLeft = document.querySelector('.archive-glampings__left');
  var btns = btnMap.querySelectorAll('button');
  // btns.forEach((btn) => {
  btnMap.addEventListener('click', function (e) {
    btnMapChange(btns);
    if (btnMap.id == 'mapClose') {
      archGlampingsLeft.classList.remove('no-map');
      glampingsItems.classList.remove('card');
      glampingsItems.classList.add('list');
      glampingsMap.classList.add('active');
      glampingsMap.children[0].innerHTML = '';
      var glempAll = JSON.parse(glamping_club_ajax.glAll);
      var newgGempAll = glempAll.filter(filtrOptionsChange);
      var priceObj = [];
      priceObj = sliderUpdatePrice(newgGempAll);
      newgGempAll = glempAll.filter(filtrOptionsChange).filter(priceRange, priceObj);
      mapRender(mapPointTest(newgGempAll));
      btnMap.id = 'mapVision';
      btnMap.innerText = 'Список';
      Cookies.set('glcTemp', btnMap.id);
    } else if (btnMap.id == 'mapVision') {
      glampingsItems.classList.remove('list');
      glampingsItems.classList.add('card');
      glampingsMap.classList.remove('active');
      archGlampingsLeft.classList.add('no-map');
      btnMap.id = 'mapClose';
      btnMap.innerText = 'Карта';
      Cookies.set('glcTemp', btnMap.id);
    }
    // Cookies.set('glcTemp', btnMap.id);
  });
  // console.dir(btn);
  // });
};
listCardMapMobile();
function btnMapChange(btns) {
  btns.forEach(function (btn) {
    btn.classList.remove('active');
  });
}
function sortGlemp() {
  var sortGlemp = document.querySelector('.filtr-item__options.sort-glemp');
  if (!sortGlemp) return;
  var filtrOptions = sortGlemp.querySelectorAll('.filtr-option');
  filtrOptions.forEach(function (elem) {
    elem.addEventListener('click', function (e) {
      elem.parentElement.previousElementSibling.children[0].innerText = e.target.innerText;
      optionsChecked(filtrOptions);
      elem.children[1].classList.add('active');
      var sortGl = elem.dataset.value;
      Cookies.set('glcSort', sortGl);
      sortGlempRender(sortGl);
      sortGlemp.classList.remove('active');
      sortGlemp.previousElementSibling.children[1].classList.remove('active');
    });
  });
}
sortGlemp();
function sortGlempRender(sortGl) {
  var priceObj = [];
  var glcPrice = localStorage.getItem('glcPrice');
  if (glcPrice) {
    priceObj = glcPrice.split(',');
  }
  var glempAll = JSON.parse(glamping_club_ajax.glAll);
  var newgGempAll = glempAll.filter(filtrOptionsChange).filter(priceRange, priceObj.map(Number));
  // let sortGl = Cookies.get('glcSort');
  if (sortGl) {
    if (sortGl == 'new_items') {
      newgGempAll.sort(function (x, y) {
        return y.post_date - x.post_date;
      });
    } else if (sortGl == 'recommended') {
      newgGempAll.sort(function (x, y) {
        return y.recommended - x.recommended;
      });
    } else if (sortGl == 'max_price') {
      newgGempAll.sort(function (x, y) {
        return y.price - x.price;
      });
    } else if (sortGl == 'min_price') {
      newgGempAll.sort(function (x, y) {
        return x.price - y.price;
      });
    }
    // else if (sortGl == 'popular') {
    //     newgGempAll.sort((x, y) => y.views - x.views);
    // } else if (sortGl == 'rating') {
    //     newgGempAll.sort((x, y) => y.review_rating - x.review_rating || y.review_count - x.review_count);
    // }
  }
  glempRender(newgGempAll);
}
function optionsChecked(options) {
  options.forEach(function (elem) {
    elem.children[1].classList.remove('active');
  });
}

/***/ }),

/***/ "./src/js/generale.js":
/*!****************************!*\
  !*** ./src/js/generale.js ***!
  \****************************/
/***/ (() => {

function navScroll(elementId) {
  var masthead = document.getElementById(elementId);
  var asideContent = document.getElementById('aside-content');
  var btnFiltrVisionMobile = document.getElementById('btn-filtr-vision-mobile');
  var prevScrollpos = window.pageYOffset;
  window.onscroll = function () {
    var currentScrollPos = window.pageYOffset;
    if (prevScrollpos > currentScrollPos) {
      var headHeight = masthead.offsetHeight + 20;
      masthead.style.top = "0";
      if (asideContent) {
        asideContent.style.top = headHeight + "px";
      }
      if (btnFiltrVisionMobile) {
        btnFiltrVisionMobile.style.top = '';
      }
    } else {
      if (prevScrollpos > masthead.offsetHeight) {
        //clientHeight
        masthead.style.top = '-' + masthead.offsetHeight + 'px';
      }
      if (asideContent) {
        asideContent.style.top = '24px';
      }
      if (btnFiltrVisionMobile) {
        btnFiltrVisionMobile.style.top = '0';
      }
    }
    prevScrollpos = currentScrollPos;
  };
}
navScroll('masthead');
function asideScroll(elementId, header) {
  var asideContent = document.getElementById(elementId);
  var headerDiv = document.getElementById(header);
  var prevScroll = window.pageYOffset;
  window.onscroll = function () {
    var currentScroll = window.pageYOffset;
    if (prevScroll > currentScroll) {
      asideContent.style.top = headerDiv.offsetHeight + "px";
    } else {
      asideContent.style.top = '24px';
    }
    prevScroll = currentScroll;
  };
}
// asideScroll('aside-content', 'masthead');

function dashboardHeight(headerId, tabsTd) {
  var dashboardHead = document.getElementById(headerId);
  var tabs = document.getElementById(tabsTd);
  if (dashboardHead && tabs) {
    var logo = document.getElementById('dashboard-logo');
    var sidebarContent = document.getElementById('dashboard-sidebar-content');
    var ha = dashboardHead.offsetHeight;
    var h = "calc(100vh - ".concat(ha, "px)");
    tabs.style.height = h;
    sidebarContent.style.height = h;
    logo.style.height = "".concat(ha, "px");
    window.addEventListener('resize', function () {
      ha = dashboardHead.offsetHeight;
      h = "calc(100vh - ".concat(ha, "px)");
      tabs.style.height = h;
      sidebarContent.style.height = h;
      logo.style.height = "".concat(ha, "px");
    });
  }
}
dashboardHeight('dashboard-header', 'dashboard-tabs');
function dashboardHeightPlus(headerId, footerId, tabsTd) {
  var dashboardHead = document.getElementById(headerId);
  var dashboardFooter = document.getElementById(footerId);
  var tabs = document.getElementById(tabsTd);
  if (dashboardHead && dashboardFooter && tabs) {
    var ha = dashboardHead.offsetHeight + dashboardFooter.offsetHeight;
    var h = "calc(100vh - ".concat(ha, "px)");
    tabs.style.height = h;
    window.addEventListener('resize', function () {
      h = "calc(100vh - ".concat(ha, "px)");
      tabs.style.height = h;
    });
  }
}
// dashboardHeightPlus('masthead', 'dashboard-colophon', 'dashboard-tabs');

var sidebarNavVision = function sidebarNavVision() {
  btnSidebarNav = document.querySelector('#js-sidebar-nav');
  if (btnSidebarNav) {
    sidebarNav = document.querySelector('.sidebar-nav');
    overlay = document.querySelector('.js-overlay-modal');
    close = document.querySelector('#js-close');
    body = document.querySelector('body');
    btnSidebarNav.addEventListener('click', function (e) {
      overlay.classList.toggle('active');
      sidebarNav.classList.toggle('active');
      body.classList.toggle('js-overlay');
    });
    overlay.addEventListener('click', function () {
      sidebarNav.classList.remove('active');
      this.classList.remove('active');
      body.classList.remove('js-overlay');
    });
    document.body.addEventListener('keyup', function (e) {
      var key = e.keyCode;
      if (key == 27) {
        sidebarNav.classList.remove('active');
        overlay.classList.remove('active');
        body.classList.remove('js-overlay');
      }
      ;
    }, false);
    close.addEventListener('click', function () {
      sidebarNav.classList.remove('active');
      overlay.classList.remove('active');
      body.classList.remove('js-overlay');
    });
  }
};
sidebarNavVision();
var sidebarDashboardVision = function sidebarDashboardVision() {
  btnSidebarNav = document.querySelector('#js-sidebar-nav-dashboard');
  if (btnSidebarNav) {
    sidebarNav = document.querySelector('#dashboard-sidebar');
    overlay = document.querySelector('.js-overlay-modal');
    close = document.querySelector('#js-dashboard-close');
    body = document.querySelector('body');
    btnSidebarNav.addEventListener('click', function (e) {
      overlay.classList.toggle('active');
      sidebarNav.classList.toggle('active');
      body.classList.toggle('js-overlay');
    });
    overlay.addEventListener('click', function () {
      sidebarNav.classList.remove('active');
      this.classList.remove('active');
      body.classList.remove('js-overlay');
    });
    document.body.addEventListener('keyup', function (e) {
      var key = e.keyCode;
      if (key == 27) {
        sidebarNav.classList.remove('active');
        overlay.classList.remove('active');
        body.classList.remove('js-overlay');
      }
      ;
    }, false);
    close.addEventListener('click', function () {
      sidebarNav.classList.remove('active');
      overlay.classList.remove('active');
      body.classList.remove('js-overlay');
    });
  }
};
sidebarDashboardVision();
var filtrVision = function filtrVision() {
  btnfiltrVision = document.querySelector('#js-filtr-vision');
  if (btnfiltrVision) {
    filtr = document.querySelector('.filtr-items');
    close = document.querySelector('#js-filtr-close');
    body = document.querySelector('body');
    btnfiltrVision.addEventListener('click', function (e) {
      filtr.classList.toggle('active');
      body.classList.toggle('js-overlay');
    });
    document.body.addEventListener('keyup', function (e) {
      var key = e.keyCode;
      if (key == 27) {
        filtr.classList.remove('active');
        body.classList.remove('js-overlay');
      }
      ;
    }, false);
    close.addEventListener('click', function () {
      filtr.classList.remove('active');
      body.classList.remove('js-overlay');
    });
  }
};
// filtrVision();

var searchVision = function searchVision() {
  btnsearchVision = document.querySelector('#js-search-vision');
  if (btnsearchVision) {
    search = document.querySelector('.header-generale__form');
    btnsearchVision.addEventListener('click', function (e) {
      search.classList.toggle('active');
      btnsearchVision.classList.toggle('active');
    });
    document.body.addEventListener('keyup', function (e) {
      var key = e.keyCode;
      if (key == 27) {
        search.classList.remove('active');
        btnsearchVision.classList.remove('active');
      }
      ;
    }, false);
  }
};
searchVision();

// jQuery
jQuery(document).ready(function ($) {
  function scrollToTop(pxShow, scrollSpeed) {
    // pxShow - height on which the button will show
    // scrollSpeed - how slow / fast you want the button to scroll to top.
    $(window).scroll(function () {
      if ($(window).scrollTop() >= pxShow) {
        $(".btn-to-top").addClass('visible');
        $(".request-call").addClass('btn-top-vision');
      } else {
        $(".btn-to-top").removeClass('visible');
        $(".request-call").removeClass('btn-top-vision');
      }
    });
    $('a.scroll-to-top').on('click', function () {
      $('html, body').animate({
        scrollTop: 0
      }, scrollSpeed);
      return false;
    });
  }
  scrollToTop(400, 400);
  function scrollAnimate() {
    $(document).on('click', 'a.animate-scroll[href^="#"]', function (event) {
      event.preventDefault();
      //var indent = $($.attr(this, 'href')).attr('data-top');
      var indent = $(this).attr('data-top');
      if (indent) {
        indent_top = indent;
      } else {
        indent_top = 0;
      }
      if ($($.attr(this, 'href')).length > 0) {
        $('html, body').animate({
          scrollTop: $($.attr(this, 'href')).offset().top - indent_top
        }, 500);
      }
    });
  }
  scrollAnimate();

  // // magnificPopup
  // function mfpInit( index ) {
  //     $('.gallery-'+index).magnificPopup({
  //         type: 'image',
  //         delegate: '.mfp',
  //         tClose: 'Закрыть (Esc)',
  //         tLoading: 'Загрузка...',
  //         gallery:{
  //             enabled: true,
  //             tPrev: 'Назад',
  //             tNext: 'Вперед',
  //             tCounter: '%curr% из %total%'
  //         },
  //         image: {
  //             tError: '<a href="%url%">Изображение</a> не удалось загрузить.'
  //         },
  //         ajax: {
  //             tError: '<a href="%url%">Запрос</a> не выполнен.'
  //         }
  //     });
  // }
  // mfpInit('1');
  // mfpInit('2');
  // mfpInit('3');
  // mfpInit('4');
  // mfpInit('5');
  // mfpInit('6');
  // mfpInit('7');
  // mfpInit('8');
  // mfpInit('9');
  // mfpInit('10');
  // mfpInit('11');
  // mfpInit('12');
  // mfpInit('13');
  // mfpInit('14');
  // mfpInit('15');
  // mfpInit('16');
  // mfpInit('17');
  // mfpInit('18');
  // mfpInit('19');
  // mfpInit('20');
  // mfpInit('all');
  //
  // $('.popup-youtube, .popup-vimeo, .popup-gmaps').magnificPopup({
  // 	disableOn: 700,
  // 	type: 'iframe',
  // 	mainClass: 'mfp-fade',
  //     tClose: 'Закрыть (Esc)',
  // 	removalDelay: 160,
  // 	preloader: false,
  //     fixedContentPos: true,
  //     fixedBgPos: true,
  //     overflowY: 'hidden',
  //     // callbacks: {
  //     //     open: function() {
  //     //
  //     //     },
  //     //     close: function() {
  //     //
  //     //     }
  //     // }
  // });
  //
  // $('.image-popup-fit-width').magnificPopup({
  // 	type: 'image',
  // 	closeOnContentClick: true,
  // 	image: {
  // 		verticalFit: false
  // 	}
  // });
  //
  // $('.image-popup-vertical-fit').magnificPopup({
  // 	type: 'image',
  // 	closeOnContentClick: true,
  // 	mainClass: 'mfp-img-mobile',
  // 	image: {
  // 		verticalFit: true
  // 	}
  //
  // });
});

/***/ }),

/***/ "./src/js/popups.js":
/*!**************************!*\
  !*** ./src/js/popups.js ***!
  \**************************/
/***/ (() => {

// Модальные окна
!function (e) {
  "function" != typeof e.matches && (e.matches = e.msMatchesSelector || e.mozMatchesSelector || e.webkitMatchesSelector || function (e) {
    for (var t = this, o = (t.document || t.ownerDocument).querySelectorAll(e), n = 0; o[n] && o[n] !== t;) ++n;
    return Boolean(o[n]);
  }), "function" != typeof e.closest && (e.closest = function (e) {
    for (var t = this; t && 1 === t.nodeType;) {
      if (t.matches(e)) return t;
      t = t.parentNode;
    }
    return null;
  });
}(window.Element.prototype);
document.addEventListener('DOMContentLoaded', function () {
  var modalButtons = document.querySelectorAll('.js-open-modal'),
    overlay = document.querySelector('.js-overlay-modal'),
    closeButtons = document.querySelectorAll('.js-modal-close');
  body = document.querySelector('body'), modalButtons.forEach(function (item) {
    item.addEventListener('click', function (e) {
      e.preventDefault();
      var modalId = this.getAttribute('data-modal'),
        modalElem = document.querySelector('.modal[data-modal="' + modalId + '"]');
      modalElem.classList.add('active');
      overlay.classList.add('active');
      body.style.overflowY = 'hidden';
    }); // end click
  }); // end foreach
  closeButtons.forEach(function (item) {
    item.addEventListener('click', function (e) {
      var parentModal = this.closest('.modal');
      parentModal.classList.remove('active');
      overlay.classList.remove('active');
      body.style.overflowY = '';
    });
  }); // end foreach
  document.body.addEventListener('keyup', function (e) {
    var key = e.keyCode;
    if (key == 27) {
      var modalActive = document.querySelector('.modal.active');
      if (modalActive) {
        document.querySelector('.modal.active').classList.remove('active');
      }
      document.querySelector('.overlay').classList.remove('active');
      body.style.overflowY = '';
    }
    ;
  }, false);
  overlay.addEventListener('click', function () {
    var modalActive = document.querySelector('.modal.active');
    if (modalActive) {
      document.querySelector('.modal.active').classList.remove('active');
    }
    this.classList.remove('active');
    body.style.overflowY = '';
  });
}); // end ready (Модальные окна)

/***/ }),

/***/ "./src/scss/main.scss":
/*!****************************!*\
  !*** ./src/scss/main.scss ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _js_generale_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/generale.js */ "./src/js/generale.js");
/* harmony import */ var _js_generale_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_generale_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _js_popups_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js/popups.js */ "./src/js/popups.js");
/* harmony import */ var _js_popups_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_js_popups_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _js_filtr_filtr_generale_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js/filtr/filtr-generale.js */ "./src/js/filtr/filtr-generale.js");
/* harmony import */ var _js_filtr_filtr_generale_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_js_filtr_filtr_generale_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _js_filtr_filtr_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js/filtr/filtr-render.js */ "./src/js/filtr/filtr-render.js");
/* harmony import */ var _js_filtr_filtr_render_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_filtr_filtr_render_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _scss_main_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! .//scss/main.scss */ "./src/scss/main.scss");



// Filtr



// scss

})();

/******/ })()
;
//# sourceMappingURL=bundle.min.js.map